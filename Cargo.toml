[package]
name = "dropping-thread-local"
description = "A dynamically allocated ThreadLocal that ensures destructors are run on thread exit"
version = "0.1.0-alpha.0"
authors = ["Techcable"]
license = "Apache-2.0 OR MIT"
edition = "2024"
repository = "https://github.com/Techcable/dropping-thread-local.rs"
keywords = ["thread-local", "drop", "concurrent", "thread", "destructor"]
categories = ["concurrency", "data-structures", "memory-management"]
# 1.85 - 2024 edition
rust-version = "1.85"

[dependencies]
parking_lot = "0.12"
portable-atomic = "1"
foldhash = "0.1"
# persistent collections
imbl = "5"

[features]
nightly = [
    "parking_lot/nightly",
]

[lints.rust]
missing-docs = "deny"
rust-2024-compatibility = "warn"
unsafe-op-in-unsafe-fn = "deny"
macro-use-extern-crate = "deny"

[lints.clippy]
# style
alloc-instead-of-core = "warn"
std-instead-of-alloc = "warn"
std-instead-of-core = "warn"
checked-conversions = "deny" # prefer try_from to explicit range checks
macro_use_imports = "deny" # forbid old-style #[macro_use]

# in an ideal world. overflowing casts would panic
# linting them (with deny) is the second best option
cast-possible-truncation = "deny"
cast-possible-wrap = "deny"
cast-precision-loss = "deny"
cast-sign-loss = "deny"
char-lit-as-u8 = "deny"
cast-ptr-alignment = "deny"
fn-to-numeric-cast = "deny"
fn-to-numeric-cast-any = "deny"
fn-to-numeric-cast-with-truncation = "deny"
cast-lossless = "allow" # lossless casts are fine, lints will catch if types change
ptr_as_ptr = "allow" # pointer casts are fine as long as they don't violate another rule


# safety
undocumented_unsafe_blocks = "deny" # all unsafe blocks should be documented
missing_safety_doc = "deny"

# debugging leftovers
dbg_macro = "allow"
print_stderr = "allow"
print_stdout = "allow"
